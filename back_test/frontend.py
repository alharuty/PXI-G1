import streamlit as st
import requests
import json

st.set_page_config(page_title="Simple RAG System", layout="wide")

st.title("üß† Simple RAG System")
st.markdown("–°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –í—ã–±–æ—Ä API
    api_url = st.text_input("API URL", value="http://127.0.0.1:8000")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if st.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"):
        try:
            response = requests.get(f"{api_url}/")
            if response.status_code == 200:
                st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                data = response.json()
                st.info(f"–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {data['docs_count']}")
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
tab1, tab2, tab3, tab4 = st.tabs(["üîç –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π", "üìö –î–æ–±–∞–≤–∏—Ç—å –≤ RAG", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])

with tab1:
    st.header("–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π –≤ arXiv")
    
    col1, col2 = st.columns([3, 1])
    with col1:
        search_query = st.text_input("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: quantum computing")
    with col2:
        max_results = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", min_value=1, max_value=20, value=5)
    
    if st.button("üîç –ù–∞–π—Ç–∏ —Å—Ç–∞—Ç—å–∏"):
        if search_query:
            with st.spinner("–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π..."):
                try:
                    response = requests.post(f"{api_url}/search-arxiv", 
                                           json={"query": search_query, "max_results": max_results})
                    
                    if response.status_code == 200:
                        data = response.json()
                        articles = data["articles"]
                        
                        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π")
                        
                        for i, article in enumerate(articles, 1):
                            with st.expander(f"{i}. {article['title']}"):
                                st.write(f"**–ê–≤—Ç–æ—Ä—ã:** {', '.join(article['authors'])}")
                                st.write(f"**–°—Å—ã–ª–∫–∞:** {article['link']}")
                                st.write(f"**–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è:** {article['summary']}")
                    else:
                        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞—Ç–µ–π")
                        
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞: {e}")
        else:
            st.warning("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")

with tab2:
    st.header("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å–∏ –≤ RAG —Å–∏—Å—Ç–µ–º—É")
    
    col1, col2 = st.columns([3, 1])
    with col1:
        rag_query = st.text_input("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è RAG", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: machine learning")
    with col2:
        rag_max_results = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π", min_value=1, max_value=20, value=5)
    
    if st.button("üìö –î–æ–±–∞–≤–∏—Ç—å –≤ RAG"):
        if rag_query:
            with st.spinner("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –≤ RAG..."):
                try:
                    response = requests.post(f"{api_url}/add-documents", 
                                           json={"query": rag_query, "max_results": rag_max_results})
                    
                    if response.status_code == 200:
                        data = response.json()
                        st.success(data["message"])
                        st.info(f"–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {data['total_docs']}")
                    else:
                        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                        
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞: {e}")
        else:
            st.warning("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")

with tab3:
    st.header("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫ RAG —Å–∏—Å—Ç–µ–º–µ")
    
    col1, col2 = st.columns([3, 1])
    with col1:
        question = st.text_input("–í–∞—à –≤–æ–ø—Ä–æ—Å", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: –ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è?")
    with col2:
        question_max_results = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", min_value=1, max_value=10, value=5)
    
    if st.button("‚ùì –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"):
        if question:
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞..."):
                try:
                    response = requests.post(f"{api_url}/ask", 
                                           json={"topic": "general", "question": question, "max_results": question_max_results})
                    
                    if response.status_code == 200:
                        data = response.json()
                        
                        # –û—Ç–≤–µ—Ç
                        st.subheader("ü§ñ –û—Ç–≤–µ—Ç:")
                        st.write(data["answer"])
                        
                        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                        confidence = data["confidence"]
                        st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{confidence:.2f}")
                        
                        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
                        if data["sources"]:
                            st.subheader("üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
                            for i, source in enumerate(data["sources"], 1):
                                with st.expander(f"{i}. {source['title']} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {source['similarity']:.2f})"):
                                    st.write(f"**–ê–≤—Ç–æ—Ä—ã:** {', '.join(source['authors'])}")
                                    st.write(f"**–°—Å—ã–ª–∫–∞:** {source['link']}")
                        else:
                            st.info("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                            
                    else:
                        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞")
                        
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞: {e}")
        else:
            st.warning("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")

with tab4:
    st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    if st.button("üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
        try:
            response = requests.get(f"{api_url}/stats")
            
            if response.status_code == 200:
                data = response.json()
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤", data["total_documents"])
                with col2:
                    st.metric("Embedding –º–æ–¥–µ–ª—å", data["embedding_model"])
                with col3:
                    st.metric("LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä", data["llm_provider"])
                
                st.info(f"LLM –º–æ–¥–µ–ª—å: {data['llm_model']}")
                
            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")
    
    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"):
        try:
            response = requests.post(f"{api_url}/clear")
            
            if response.status_code == 200:
                st.success("–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—á–∏—â–µ–Ω—ã!")
            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
st.markdown("---")
st.markdown("""
### üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:

1. **üîç –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π** - –Ω–∞–π–¥–∏—Ç–µ —Å—Ç–∞—Ç—å–∏ –≤ arXiv
2. **üìö –î–æ–±–∞–≤–∏—Ç—å –≤ RAG** - –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç–∞—Ç—å–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
3. **‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å** - –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
4. **üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã

### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞:
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ `env_template.txt` –≤ `.env`
2. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: `python main.py`
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: `streamlit run frontend.py`
""") 